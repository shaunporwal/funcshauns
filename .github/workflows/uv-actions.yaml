name: UV CI Pipeline

on:
  push:
    branches:
      - main
      - switch-to-uv  # Add your current branch here for testing
    tags:
      - '*'
  pull_request:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment and install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run Tests
        run: |
          source .venv/bin/activate
          pytest

  publish-to-testpypi:
    name: Publish to Test PyPI (DRY RUN on branch)
    # Run on main or your current branch, but with different behavior
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/switch-to-uv'
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv and twine
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv venv
          source .venv/bin/activate
          uv pip install twine tomli

      - name: Get package name and version
        id: get-package-info
        run: |
          source .venv/bin/activate
          python -c "
          import tomli
          with open('pyproject.toml', 'rb') as f:
              data = tomli.load(f)
          print(f'PACKAGE_NAME={data[\"project\"][\"name\"]}')
          print(f'VERSION={data[\"project\"][\"version\"]}')
          " >> $GITHUB_ENV

      - name: Check version on Test PyPI
        id: version-check
        run: |
          RESPONSE=$(curl -s https://test.pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "error")
          if [ "$RESPONSE" != "error" ] && echo "$RESPONSE" | jq -r '.releases | keys' | grep -q "\"${VERSION}\""; then
            echo "Version ${VERSION} already exists on Test PyPI."
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "Version ${VERSION} does not exist on Test PyPI. Proceeding with publish."
            echo "skip=false" >> $GITHUB_ENV
          fi

      - name: Build package
        if: env.skip != 'true'
        run: |
          source .venv/bin/activate
          uv build

      - name: Publish to Test PyPI (only on main)
        if: env.skip != 'true' && github.ref == 'refs/heads/main'
        run: |
          source .venv/bin/activate
          twine upload --repository testpypi dist/* -u __token__ -p ${{ secrets.TEST_PYPI_API_TOKEN }}
          
      - name: DRY RUN - Publish to Test PyPI (on branch)
        if: env.skip != 'true' && github.ref == 'refs/heads/switch-to-uv'
        run: |
          source .venv/bin/activate
          echo "DRY RUN: Would upload to TestPyPI with command:"
          echo "twine upload --repository testpypi dist/* -u __token__ -p [HIDDEN]"
          echo "Package files that would be uploaded:"
          ls -la dist/

  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv and twine
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv venv
          source .venv/bin/activate
          uv pip install twine tomli

      - name: Get package name and version
        id: get-package-info
        run: |
          source .venv/bin/activate
          python -c "
          import tomli
          with open('pyproject.toml', 'rb') as f:
              data = tomli.load(f)
          print(f'PACKAGE_NAME={data[\"project\"][\"name\"]}')
          print(f'VERSION={data[\"project\"][\"version\"]}')
          " >> $GITHUB_ENV

      - name: Check version on PyPI
        id: version-check
        run: |
          RESPONSE=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "error")
          if [ "$RESPONSE" != "error" ] && echo "$RESPONSE" | jq -r '.releases | keys' | grep -q "\"${VERSION}\""; then
            echo "Version ${VERSION} already exists on PyPI."
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "Version ${VERSION} does not exist on PyPI. Proceeding with publish."
            echo "skip=false" >> $GITHUB_ENV
          fi

      - name: Build package
        if: env.skip != 'true'
        run: |
          source .venv/bin/activate
          uv build

      - name: Publish to PyPI
        if: env.skip != 'true'
        run: |
          source .venv/bin/activate
          twine upload --repository pypi dist/* -u __token__ -p ${{ secrets.PYPI_API_TOKEN }} 